# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PYTHON_VERSION: 3.8

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Cache Poetry cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}
    - name: Cache Packages
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --no-root

    # 缓存 image
    - name: Create image cache dir
      run: mkdir -p ~/.image-cache
    - id: image-cache
      name: Cache image
      uses: actions/cache@v2
      with:
        path: ~/.image-cache
        key: image-cache-${{ runner.os }}-${{ hashFiles('**/docker-compose.test.yaml') }}
    - if: steps.image-cache.outputs.cache-hit != 'true'
      run: |
        make compose-pull ENV=test
        docker save -o ~/.image-cache/docker-images.tar $(docker-compose -f docker-compose.test.yaml config | awk '{if ($1 == "image:") print $2;}')
    - if: steps.image-cache.outputs.cache-hit == 'true'
      run: docker load -i ~/.image-cache/docker-images.tar

    - name: Build the stack
      run: |
        cp example.env .env
        cp instance/example.config.py instance/test.config.py
        make compose-up ENV=test
        make celery-up
        sleep 5s
        make db-upgrade
    - name: Test with pytest
      run: |
        make test
